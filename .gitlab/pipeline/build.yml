# This file is part of .gitlab-ci.yml
# Here are all jobs that are executed during "build" stage

# build jobs from polkadot

build-linux-stable:
  stage: build
  extends:
    - .docker-env
    - .common-refs
    - .run-immediately
    - .collect-artifacts
  variables:
    RUST_TOOLCHAIN: stable
    # Enable debug assertions since we are running optimized builds for testing
    # but still want to have debug assertions.
    RUSTFLAGS: "-Cdebug-assertions=y -Dwarnings"
    # Ensure we run the UI tests.
    RUN_UI_TESTS: 1
  script:
    - time cargo build --locked --profile testnet --features pyroscope,fast-runtime --bin polkadot --bin polkadot-prepare-worker --bin polkadot-execute-worker
    - time ROCOCO_EPOCH_DURATION=10  ./polkadot/scripts/build-only-wasm.sh rococo-runtime $(pwd)/runtimes/rococo-runtime-10/
    - time ROCOCO_EPOCH_DURATION=100 ./polkadot/scripts/build-only-wasm.sh rococo-runtime $(pwd)/runtimes/rococo-runtime-100/
    - time ROCOCO_EPOCH_DURATION=600 ./polkadot/scripts/build-only-wasm.sh rococo-runtime $(pwd)/runtimes/rococo-runtime-600/
    - pwd
    - ls -alR runtimes
    # pack artifacts
    - mkdir -p ./artifacts
    - VERSION="${CI_COMMIT_REF_NAME}" # will be tag or branch name
    - mv ./target/testnet/polkadot ./artifacts/.
    - mv ./target/testnet/polkadot-prepare-worker ./artifacts/.
    - mv ./target/testnet/polkadot-execute-worker ./artifacts/.
    - mv ./runtimes/ ./artifacts/.
    - pushd artifacts
    - sha256sum polkadot | tee polkadot.sha256
    - shasum -c polkadot.sha256
    - popd
    - EXTRATAG="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"
    - echo "Polkadot version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
    - echo -n ${VERSION} > ./artifacts/VERSION
    - echo -n ${EXTRATAG} > ./artifacts/EXTRATAG
    - echo -n ${CI_JOB_ID} > ./artifacts/BUILD_LINUX_JOB_ID
    - RELEASE_VERSION=$(./artifacts/polkadot -V | awk '{print $2}'| awk -F "-" '{print $1}')
    - echo -n "v${RELEASE_VERSION}" > ./artifacts/BUILD_RELEASE_VERSION
    - cp -r docker/* ./artifacts

build-templates-node:
  stage: build
  extends:
    - .docker-env
    - .common-refs
    - .run-immediately
    - .collect-artifacts
  script:
    - time cargo build --locked --package minimal-template-node --release
    - time cargo build --locked --package solochain-template-node --release
    # pack artifacts
    - mkdir -p ./artifacts
    - mv ./target/release/minimal-template-node ./artifacts/.
    - mv ./target/release/solochain-template-node ./artifacts/.

# substrate

build-linux-substrate:
  stage: build
  extends:
    - .docker-env
    - .common-refs
    - .collect-artifacts
  # DAG
  needs:
    - job: build-linux-stable
      artifacts: false
  variables:
    # this variable gets overriden by "rusty-cachier environment inject", use the value as default
    CARGO_TARGET_DIR: "$CI_PROJECT_DIR/target"
  before_script:
    - mkdir -p ./artifacts/substrate/
    # tldr: we need to checkout the branch HEAD explicitly because of our dynamic versioning approach while building the substrate binary
    # see https://github.com/paritytech/ci_cd/issues/682#issuecomment-1340953589
    - git checkout -B "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
    - !reference [.forklift-cache, before_script]
  script:
    - time WASM_BUILD_NO_COLOR=1 cargo build --locked --release -p staging-node-cli
    - mv $CARGO_TARGET_DIR/release/substrate-node ./artifacts/substrate/substrate
    - echo -n "Substrate version = "
    - if [ "${CI_COMMIT_TAG}" ]; then
      echo "${CI_COMMIT_TAG}" | tee ./artifacts/substrate/VERSION;
      else
      ./artifacts/substrate/substrate --version |
      cut -d ' ' -f 2 | tee ./artifacts/substrate/VERSION;
      fi
    - sha256sum ./artifacts/substrate/substrate | tee ./artifacts/substrate/substrate.sha256
    - cp -r ./docker/dockerfiles/substrate_injected.Dockerfile ./artifacts/substrate/
    # - printf '\n# building node-template\n\n'
    # - ./scripts/ci/node-template-release.sh ./artifacts/substrate/substrate-node-template.tar.gz
